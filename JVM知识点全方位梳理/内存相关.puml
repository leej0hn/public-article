@startmindmap
+ JVM
++ 内存相关
+++ 内存分配
++++ 对象优先在Eden区分配
+++++ 大多数情况下，对象在新生代Eden区中分配。\l当Eden区没有足够空间分配时，虚拟机将发起一次Minor GC。
++++ 大对象直接进入老年代
+++++ 最典型的大对象是那种很长的字符串以及数组
++++++ <B>避免在Eden区和Survivor区之间的大量内存复制
++++ 长期存活对象进入老年区
+++++ 如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，\l将被移动到Survivor空间中，并将对象年龄设为1，对象在Survivor区中每熬过一次 Minor GC，\l年龄就增加1，当它的年龄增加到一定程度(默认为15)时，就会被晋升到老年代中。
++++ 对象年龄动态判定
+++++ 如果在 Survivor空间中相同年龄所有对象大小的总合大于Survivor空间的一半，\l年龄大于或等于该年龄的对象就可以直接进入老年代
++++ 空间分配担保
+++++ 在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，\l如果这个条件成立，那么Minor GC可以确保是安全的。\l如果不成立，则虚拟机会查看<B>HandlePromotionFailure</B>设置值是否允许担保失败。\l如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，\l如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的，如果担保失败则会进行一次Full GC；\l如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。
+++ 内存回收
++++ Minor GC
+++++ 特点
++++++ 发生在新生代上,发生频繁,执行速度快
+++++ 触发条件
++++++ Eden区空间不足
++++++ 空间分配担保
++++ Full GC
+++++ 特点
++++++ 发生在老年代上,较少发生,执行速度较慢
+++++ 触发条件
++++++ 调用System.gc()
++++++ 老年代区域空间不足
++++++ 空间分配担保失败
++++++ JDK 1.7及以前的永久代（方法区）空间不足
++++++ CMS GC处理浮动垃圾时，如果新生代空间不足，则采用空间分配担保机制，\l如果老年代空间不足，则触发Full GC
+++ 内存溢出
++++ 程序在申请内存时，没有足够的内存空间
++++ 内存溢出的构造方式
+++++ OutOfMemoryError:不断创建对象
+++++ 栈溢出
++++++ StackOverflowError: 增大本地变量表，例如不合理的递归
++++++ OutOfMemoryError:不断建立线程
+++++ 方法区和运行时常量池溢出
++++++ OutOfMemoryError:通过String.intern()方法不断向常量池中添加常量,\l例如String.valueOf(i++).intern()
+++++ 本机内存直接溢出
+++ 内存泄漏
++++ 程序在申请内存后，无法释放已申请的内存空间
++++ 原因
+++++ 长生命周期的对象持有短生命周期对象的引用
++++++ 例如将ArrayList设置为静态变量，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏
+++++ 连接未关闭
++++++ 如数据库连接、网络连接和IO连接等，只有连接被关闭后，垃圾回收器才会回收对应的对象
+++++ 变量作用域不合理
++++++ 1 一个变量的定义的作用范围大于其使用范围
++++++ 2 如果没有及时地把对象设置为null
+++++ 内部类持有外部类
++++++ Java的非静态内部类的这种创建方式，会隐式地持有外部类的引用，而且默认情况下这个引用是强引用，\l因此，如果内部类的生命周期长于外部类的生命周期，程序很容易就产生内存泄漏
++++++ 解决方法
+++++++ 将内部类定义为static
+++++++ 用static的变量引用匿名内部类的实例
+++++++ 或将匿名内部类的实例化操作放到外部类的静态方法中
+++++ Hash值改变
++++++ <B>在集合中，如果修改了对象中的那些参与计算哈希值的字段，会导致无法从集合中单独删除当前对象，造成内存泄露
@endmindmap